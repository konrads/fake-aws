#!/usr/bin/env bash
img_ns=konrads/fake_aws
cnt_ns=fake_aws
curr_dir="$(dirname "$0")"
root_dir="$(dirname "$curr_dir")"
. $curr_dir/commons.sh

verify_data_dir() {
  if [ "$1" == "" ]
  then
    log_red "  Missing <data-dir>!"
    usage
  fi
}

# works with 3 or 4 params only, note /opt/fake-aws/data is not mounted if $4 is empty
cli() {
  local data_dir=$4
  if [ "$data_dir" != "" ]
  then
    data_dir_mount_param="-v $data_dir:/opt/fake-aws/data"
  fi
  docker run --rm --hostname ${cnt_ns}_client --name ${cnt_ns}_client --privileged -ti \
    --link ${cnt_ns}_s3:s3 --link ${cnt_ns}_dynamodb:dynamodb --link ${cnt_ns}_redis:redis \
    -v $curr_dir:/opt/fake-aws/bin $data_dir_mount_param \
    ${img_ns}_client $1 $2 $3 /opt/fake-aws/data
}

usage() {
  echo "  Usage:"
  echo "    help"
  echo "    env"
  echo "    images     build"
  echo "    images     delete"
  echo "    images     push"
  echo "    containers run"
  echo "    containers kill"
  echo "    data       populate"
  echo "    refresh    all         <data-dir>"
  echo "    refresh    containers  <data-dir>"
  echo "    populate   all         <data-dir>"
  echo "    list       all"
  exit 1
}

if [[ $# -lt 1 || "$1" == "help" ]]; then usage; fi

ensure_tools "docker --version"
case "$1 $2" in
  "env ")
    docker-machine env default
    echo export DOCKER_IP=\"$(docker-machine ip default)\"
    echo
    ;;
  "images build")
    set -e
    log_green "  ..building images"
    docker build -t ${img_ns}_dynamodb $root_dir/src/docker/dynamodb
    docker build -t ${img_ns}_s3       $root_dir/src/docker/s3
    docker build -t ${img_ns}_redis    $root_dir/src/docker/redis
    docker build -t ${img_ns}_client   $root_dir/src/docker/client
    ;;
  "images delete")
    log_green "  ..deleting images"
    docker rmi -f ${cnt_ns}/dynamodb ${cnt_ns}/s3 ${ns}/redis ${cnt_ns}/client
    ;;
  "images push")
    log_green "  ..pushing images (requires hub credentials setup)"
    docker push ${img_ns}_dynamodb
    docker push ${img_ns}_s3
    docker push ${img_ns}_redis
    docker push ${img_ns}_client
    ;;
  "containers run")
    set -e
    log_green "  ..starting containers"
    docker run --hostname ${cnt_ns}_dynamodb --name ${cnt_ns}_dynamodb --privileged -p 7777:7777 -td ${img_ns}_dynamodb -inMemory -port 7777
    docker run --hostname ${cnt_ns}_s3       --name ${cnt_ns}_s3       --privileged -p 3629:3629 -td ${img_ns}_s3
    docker run --hostname ${cnt_ns}_redis    --name ${cnt_ns}_redis    --privileged -p 6379:6379 -td ${img_ns}_redis
    ;;
  "containers kill")
    set +e
    log_green "  ..stopping containers"
    docker stop  ${cnt_ns}_dynamodb ${cnt_ns}_s3 ${cnt_ns}_redis
    docker stop  ${cnt_ns}_client
    log_green "  ..removing containers"
    docker rm -f ${cnt_ns}_dynamodb ${cnt_ns}_s3 ${cnt_ns}_redis ${cnt_ns}_client
    ;;
  "populate all")
    verify_data_dir $3
    data_dir=$3
    cli aws-populate refresh all $(pwd)/$data_dir
    ;;
  "refresh all")
    set +e
    verify_data_dir $3
    data_dir=$3
    $0 containers kill
    # $0 images delete
    set -e
    $0 images build
    $0 containers run
    $0 populate all $data_dir
    ;;
  "refresh containers")
    set +e
    verify_data_dir $3
    data_dir=$3
    $0 containers kill
    set -e
    $0 containers run
    $0 populate all $data_dir
    ;;
  "list all")
    cli aws-populate list all
    ;;
  *)
    log_bold "  Not a valid command: $@"
    usage
    ;;
esac
