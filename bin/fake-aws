#!/usr/bin/env bash
ns=fake-aws
repo_ns=konrads/${ns}
curr_dir="$(dirname "$0")"
root_dir="$(dirname "$curr_dir")"
. $curr_dir/commons.sh

verify_data_dir() {
  if [ "$1" == "" ]
  then
    log_red "  Missing <data-dir>!"
    usage
  fi
}

# works with 3 or 4 params only, note /opt/fake-aws/data is not mounted if $4 is empty
cli() {
  local aws_data_dir=$1
  shift
  docker run --rm --hostname ${ns}-client --name ${ns}-client --privileged -ti \
    --link ${ns}-s3:s3 --link ${ns}-dynamodb:dynamodb --link ${ns}-redis:redis \
    -v $curr_dir:/opt/fake-aws/bin \
    -v $(pwd)/$aws_data_dir:/opt/fake-aws/data \
    ${ns}-client $@ /opt/fake-aws/data
}

usage() {
  echo "  Usage:"
  echo "    help"
  echo "    images     build"
  echo "    images     delete"
  echo "    images     push"
  echo "    containers run"
  echo "    containers kill"
  echo "    data       populate"
  echo "    refresh    all         <data-dir>"
  echo "    refresh    containers  <data-dir>"
  echo "    populate   all         <data-dir>"
  echo "    list       all"
  exit 1
}

if [[ $# -lt 1 || "$1" == "help" ]]; then usage; fi

ensure_tools "docker --version"
case "$1 $2" in
  "images build")
    set -e
    log_green "  ..building images"
    docker build -t ${ns}-dynamodb $root_dir/src/docker/dynamodb
    docker build -t ${ns}-s3       $root_dir/src/docker/s3
    docker build -t ${ns}-redis    $root_dir/src/docker/redis
    docker build -t ${ns}-client   $root_dir/src/docker/client
    ;;
  "images delete")
    log_green "  ..deleting images"
    docker rmi -f ${ns}-dynamodb ${ns}-s3 ${ns}-redis ${ns}-client
    ;;
  "images push")
    log_green "  ..pushing images (requires hub credentials setup)"
    docker tag ${ns}-dynamodb ${repo_ns}-dynamodb
    docker tag ${ns}-s3 ${repo_ns}-s3
    docker tag ${ns}-redis ${repo_ns}-redis
    docker tag ${ns}-client ${repo_ns}-dynamodb
    docker push ${ns}-dynamodb
    docker push ${ns}-s3
    docker push ${ns}-redis
    docker push ${ns}-client
    ;;
  "containers run")
    set -e
    log_green "  ..starting containers"
    docker run --hostname ${ns}-dynamodb --name ${ns}-dynamodb --privileged -p 7777:7777 -td ${ns}-dynamodb -inMemory -port 7777
    docker run --hostname ${ns}-s3       --name ${ns}-s3       --privileged -p 3629:3629 -td ${ns}-s3
    docker run --hostname ${ns}-redis    --name ${ns}-redis    --privileged -p 6379:6379 -td ${ns}-redis
    ;;
  "containers kill")
    set +e
    log_green "  ..stopping containers"
    docker stop  ${ns}-dynamodb ${ns}-s3 ${ns}-redis
    log_green "  ..removing containers"
    docker rm -f ${ns}-dynamodb ${ns}-s3 ${ns}-redis
    ;;
  "populate all")
    verify_data_dir $3
    data_dir=$3
    cli $data_dir aws-populate refresh all
    ;;
  "refresh all")
    set +e
    verify_data_dir $3
    data_dir=$3
    $0 containers kill
    # $0 images delete
    set -e
    $0 images build
    $0 containers run
    $0 populate all $data_dir
    ;;
  "refresh containers")
    set +e
    verify_data_dir $3
    data_dir=$3
    $0 containers kill
    set -e
    $0 containers run
    $0 populate all $data_dir
    ;;
  "list all")
    cli aws-populate list all
    ;;
  *)
    log_bold "  Not a valid command: $@"
    usage
    ;;
esac
