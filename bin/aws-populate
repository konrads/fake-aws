#!/usr/bin/env bash

curr_dir="$(dirname "$0")"
. $curr_dir/commons.sh

usage() {
  echo "  Usage:"
  echo "    help"
  echo "    tables  delete   <data-dir>"
  echo "    tables  create   <data-dir>"
  echo "    tables  populate <data-dir>"
  echo "    tables  list"
  echo "    buckets delete   <data-dir>"
  echo "    buckets create   <data-dir>"
  echo "    buckets populate <data-dir>"
  echo "    buckets list"
  echo "    cache   delete"
  echo "    cache   populate <data-dir>"
  echo "    cache   list"
  echo "    refresh all      <data-dir>"
  echo "    list all"
  exit 1
}

# sets xx_endpoint params for dynamodb, s3, redis
set_param() {
  local host=$1
  local param_name=$2
  local param_value=$3
  if [ "$host" != "" ]
  then
    export $param_name="$param_value"
  fi
}

verify_data_dir() {
  if [ "$1" == "" ]
  then
    log_red "  Missing <data-dir>!"
    usage
  fi
}

wait_till_table_doesnt_exist() {
  local table=$1
  local exists=true
  set +e
  for i in $(seq 10)  # 10 retries
  do
    aws dynamodb describe-table $dynamodb_endpoint_param --table-name $table
    if [ "$?" != "0" ]; then
      exists=false
      break
    fi
    echo "  $table still exists..."
    sleep 3
  done
  assert_eq "$table exists" "$exists" "false"
  set -e
}

wait_till_table_status() {
  local table=$1
  local exp_status=$2
  local is_active=false
  for i in $(seq 10)  # 10 retries
  do
    local status=$(aws dynamodb describe-table $dynamodb_endpoint_param --table-name $table | jq '.Table.TableStatus')
    if [ "$status" = "\"$exp_status\"" ]; then
      is_active=true
      break
    fi
    echo "  $table status: $status..."
    sleep 3
  done
  assert_eq "$table active" "$is_active" "true"
}

tablename() {
  # Truncate extensions 3 times...
  local f1=$1
  local f2="${f1##*/}"
  local f3="${f2%.*}"
  local f4="${f3%.*}"
  echo "${f4%.*}"
}

if [[ $# -lt 1 || "$1" == "help" ]]; then usage; fi

set -e
ensure_tools "aws --version" "jq --version" "redis-cli --version"
set_param "$dynamodb_host" "dynamodb_endpoint_param" "--endpoint-url http://$dynamodb_host:7777"
set_param "$s3_host"       "s3_endpoint_param"       "--endpoint-url http://$s3_host:3629"
set_param "$redis_host"    "redis_endpoint_param"    "-h $redis_host"
case "$1 $2" in
  "tables delete")
    verify_data_dir $3
    data_dir=$3
    for table_file in $data_dir/dynamodb/schema/*.schema.json
    do
      table=$(tablename $table_file)
      set +e
      log_green "  ..deleting table $table"
      aws dynamodb delete-table $dynamodb_endpoint_param --table-name $table
      wait_till_table_doesnt_exist $table
    done
    set -e
    ;;
  "tables create")
    verify_data_dir $3
    data_dir=$3
    for table_file in $data_dir/dynamodb/schema/*.schema.json
    do
      table=$(tablename $table_file)
      log_green "  ..creating table $table"
      aws dynamodb create-table $dynamodb_endpoint_param --table-name $table --cli-input-json file://$table_file
      wait_till_table_status $table ACTIVE
    done
    ;;
  "tables populate")
    verify_data_dir $3
    data_dir=$3
    for data_file in $data_dir/dynamodb/data/*.data.json
    do
      log_green "  ..populating with data $data_file"
      aws dynamodb batch-write-item $dynamodb_endpoint_param --cli-input-json file://$data_file
    done
    ;;
  "tables list")
    log_green "  ..dynamodb tables:"
    aws dynamodb list-tables $dynamodb_endpoint_param
    ;;
  "buckets delete")
    set +e
    verify_data_dir $3
    data_dir=$3
    for bucket in $(ls $data_dir/s3)
    do
      log_green "  ..deleting bucket $bucket"
      aws s3 rb s3://$bucket $s3_endpoint_param --force
    done
    set -e
    ;;
  "buckets create")
    verify_data_dir $3
    data_dir=$3
    for bucket in $(ls $data_dir/s3)
    do
      log_green "  ..creating bucket $bucket"
      aws s3api $s3_endpoint_param create-bucket --bucket $bucket
    done
    ;;
  "buckets populate")
    verify_data_dir $3
    data_dir=$3
    for bucket in $(ls $data_dir/s3)
    do
      log_green "  ..populating bucket $bucket"
      aws s3 $s3_endpoint_param cp $data_dir/s3/$bucket s3://$bucket/ --recursive
    done
    ;;
  "buckets list")
    buckets="$(aws s3 ls $s3_endpoint_param | awk '{print $3}')"
    log_green "  ..s3 buckets:"
    for bucket in $buckets
    do
      echo $bucket
      aws s3 ls s3://$bucket $s3_endpoint_param --recursive
    done
    ;;
  "cache delete")
    log_green "  ..clearing redis"
    echo "flushall" | redis-cli $redis_endpoint_param
    ;;
  "cache populate")
    verify_data_dir $3
    data_dir=$3
    for redis_cmds in $(ls $data_dir/redis/*.redis.cmds)
    do
      log_green "  ..populating redis with $redis_cmds"
      cat $redis_cmds | redis-cli $redis_endpoint_param
    done
    ;;
  "cache list")
    log_green "  ..cache keys:"
    echo "keys *" | redis-cli $redis_endpoint_param
    ;;
  "refresh all")
    verify_data_dir $3
    data_dir=$3
    $0 tables  delete   $data_dir
    $0 tables  create   $data_dir
    $0 tables  populate $data_dir
    $0 buckets delete   $data_dir
    $0 buckets create   $data_dir
    $0 buckets populate $data_dir
    $0 cache   delete   $data_dir
    $0 cache   populate $data_dir
    ;;
  "list all")
    $0 tables  list
    $0 buckets list
    $0 cache   list
    ;;
  *)
    log_red "  Not a valid command: $@"
    usage
    ;;
esac
